// миксин подключения шрифтов
@mixin font($font_name, $file_name, $weight, $style) {

  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url("../fonts/#{$file_name}.woff") format("woff"),
    url("../fonts/#{$file_name}.woff2") format("woff2");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

// миксин анимации
@mixin anim($time, $delay) {
  -webkit-transition: all $time ease $delay;
  -moz-transition: all $time ease $delay;
  -ms-transition: all $time ease $delay;
  -o-transition: all $time ease $delay;
  transition: all $time ease $delay;
}

@mixin anim_cubic($time, $delay) {
  -webkit-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55)$delay;
  -moz-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55)$delay;
  -ms-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
  -o-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
  transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55)$delay;
}

@mixin rotate($deg) {
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -webkit-transform: rotate($deg);
  -o-transform: rotate($deg);
  transform: rotate($deg);
}

@mixin scale($num) {
  -moz-transform: scale($num);
  -ms-transform: scale($num);
  -webkit-transform: scale($num);
  -o-transform: scale($num);
  transform: scale($num);
}

@mixin skew($num) {
  -webkit-transform: skewX($num);
  -moz-transform: skewX($num);
  -ms-transform: skewX($num);
  -webkit-transform: skewX($num);
  transform: skewX($num);
}

@mixin cnt($h) {
  display: flex;
  flex-direction: column;
  height: $h;
  text-align: center;
  align-items: stretch;
  justify-content: center;
}

@mixin tr($x, $y, $z) {
  transform: translate3d($x, $y, $z);
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  font-size: 0;
}

@mixin flexorder($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// =======================  миксин адаптивности =======================
// адаптивное свойство
$maxWidth: 1920;
$maxWidthContainer: 1170;

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }

  @else {
    // всегда
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

//  Вызов миксина для определенного параметра 
// например значение padding на экране 1600 = 50px, а на экране 320px = 20px
// padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1600 - 320)));
// @include adaptive-value("padding", 50, 20, 0);
// @include adaptive-value("padding", максиальное значение свойства, минимальное значение свойства, режим один из трех выше);